Shader "Hidden/FrameDebuggerRenderTargetDisplay" {
Properties {
 _MainTex ("", any) = "white" { }
}
SubShader { 
 Tags { "ForceSupported"="true" }
 Pass {
  Tags { "ForceSupported"="true" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 54904
Program "vp" {
SubProgram "opengl " {
"!!GLLegacy
					#version 120
					
					#ifdef VERTEX
					
					varying vec3 xlv_TEXCOORD0;
					void main ()
					{
					  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
					  xlv_TEXCOORD0 = gl_MultiTexCoord0.xyz;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform vec4 _Channels;
					uniform vec4 _Levels;
					uniform sampler2D _MainTex;
					varying vec3 xlv_TEXCOORD0;
					void main ()
					{
					  vec4 col_1;
					  col_1 = (texture2D (_MainTex, xlv_TEXCOORD0.xy) - _Levels.xxxx);
					  col_1 = (col_1 / (_Levels.yyyy - _Levels.xxxx));
					  col_1 = (col_1 * _Channels);
					  float tmpvar_2;
					  tmpvar_2 = dot (_Channels, vec4(1.0, 1.0, 1.0, 1.0));
					  if ((tmpvar_2 == 1.0)) {
					    col_1 = vec4(dot (col_1, vec4(1.0, 1.0, 1.0, 1.0)));
					  };
					  gl_FragData[0] = col_1;
					}
					
					
					#endif"
}
SubProgram "d3d9 " {
"!!DX9VertexSM20
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov oT0.xyz, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[4], immediateIndexed
					dcl_input v0.xyzw
					dcl_input v1.xyz
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_temps 1
					mul r0.xyzw, v0.yyyy, cb0[1].xyzw
					mad r0.xyzw, cb0[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb0[2].xyzw, v0.zzzz, r0.xyzw
					mad o0.xyzw, cb0[3].xyzw, v0.wwww, r0.xyzw
					mov o1.xyz, v1.xyzx
					ret 
					// Approximately 0 instruction slots used"
}
SubProgram "gles " {
"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 glstate_matrix_mvp;
					varying highp vec3 xlv_TEXCOORD0;
					void main ()
					{
					  gl_Position = (glstate_matrix_mvp * _glesVertex);
					  xlv_TEXCOORD0 = _glesMultiTexCoord0.xyz;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform lowp vec4 _Channels;
					uniform mediump vec4 _Levels;
					uniform sampler2D _MainTex;
					varying highp vec3 xlv_TEXCOORD0;
					void main ()
					{
					  mediump vec4 tex_1;
					  lowp vec4 tmpvar_2;
					  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
					  tex_1 = tmpvar_2;
					  lowp vec4 tmpvar_3;
					  mediump vec4 col_4;
					  col_4 = (tex_1 - _Levels.xxxx);
					  col_4 = (col_4 / (_Levels.yyyy - _Levels.xxxx));
					  col_4 = (col_4 * _Channels);
					  lowp float tmpvar_5;
					  tmpvar_5 = dot (_Channels, vec4(1.0, 1.0, 1.0, 1.0));
					  if ((tmpvar_5 == 1.0)) {
					    col_4 = vec4(dot (col_4, vec4(1.0, 1.0, 1.0, 1.0)));
					  };
					  tmpvar_3 = col_4;
					  gl_FragData[0] = tmpvar_3;
					}
					
					
					#endif"
}
SubProgram "d3d11_9x " {
"!!DX10Level9Vertex
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					//
					//
					// Constant buffer to DX9 shader constant mappings:
					//
					// Target Reg Buffer  Start Reg # of Regs        Data Conversion
					// ---------- ------- --------- --------- ----------------------
					// c1         cb0             0         4  ( FLT, FLT, FLT, FLT)
					//
					//
					// Runtime generated constant mappings:
					//
					// Target Reg                               Constant Description
					// ---------- --------------------------------------------------
					// c0                              Vertex Shader position offset
					//
					//
					// Level9 shader bytecode:
					//
					    vs_2_0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    mul r0, v0.y, c2
					    mad r0, c1, v0.x, r0
					    mad r0, c3, v0.z, r0
					    mad r0, c4, v0.w, r0
					    mad oPos.xy, r0.w, c0, r0
					    mov oPos.zw, r0
					    mov oT0.xyz, v1
					
					// approximately 7 instruction slots used
					vs_4_0
					dcl_constantbuffer CB0[4], immediateIndexed
					dcl_input v0.xyzw
					dcl_input v1.xyz
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_temps 1
					mul r0.xyzw, v0.yyyy, cb0[1].xyzw
					mad r0.xyzw, cb0[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb0[2].xyzw, v0.zzzz, r0.xyzw
					mad o0.xyzw, cb0[3].xyzw, v0.wwww, r0.xyzw
					mov o1.xyz, v1.xyzx
					ret 
					// Approximately 0 instruction slots used"
}
SubProgram "gles3 " {
"!!GLES3
					#ifdef VERTEX
					#version 300 es
					precision highp float;
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _SinTime;
					uniform 	vec4 _CosTime;
					uniform 	vec4 unity_DeltaTime;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_OrthoParams;
					uniform 	vec4 unity_CameraWorldClipPlanes[6];
					uniform 	mat4 unity_CameraProjection;
					uniform 	mat4 unity_CameraInvProjection;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 unity_LightPosition[8];
					uniform 	mediump vec4 unity_LightAtten[8];
					uniform 	vec4 unity_SpotDirection[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec3 unity_LightColor0;
					uniform 	mediump vec3 unity_LightColor1;
					uniform 	mediump vec3 unity_LightColor2;
					uniform 	mediump vec3 unity_LightColor3;
					uniform 	vec4 unity_ShadowSplitSpheres[4];
					uniform 	vec4 unity_ShadowSplitSqRadii;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 _LightSplitsNear;
					uniform 	vec4 _LightSplitsFar;
					uniform 	mat4 unity_World2Shadow[4];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	mat4 glstate_matrix_mvp;
					uniform 	mat4 glstate_matrix_modelview0;
					uniform 	mat4 glstate_matrix_invtrans_modelview0;
					uniform 	mat4 _Object2World;
					uniform 	mat4 _World2Object;
					uniform 	vec4 unity_LODFade;
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	mat4 glstate_matrix_transpose_modelview0;
					uniform 	mat4 glstate_matrix_projection;
					uniform 	lowp vec4 glstate_lightmodel_ambient;
					uniform 	mat4 unity_MatrixV;
					uniform 	mat4 unity_MatrixVP;
					uniform 	lowp vec4 unity_AmbientSky;
					uniform 	lowp vec4 unity_AmbientEquator;
					uniform 	lowp vec4 unity_AmbientGround;
					uniform 	lowp vec4 unity_FogColor;
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 unity_SpecCube0_BoxMax;
					uniform 	vec4 unity_SpecCube0_BoxMin;
					uniform 	vec4 unity_SpecCube0_ProbePosition;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	vec4 unity_SpecCube1_BoxMax;
					uniform 	vec4 unity_SpecCube1_BoxMin;
					uniform 	vec4 unity_SpecCube1_ProbePosition;
					uniform 	mediump vec4 unity_SpecCube1_HDR;
					uniform 	lowp vec4 unity_ColorSpaceGrey;
					uniform 	lowp vec4 unity_ColorSpaceDouble;
					uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
					uniform 	mediump vec4 unity_ColorSpaceLuminance;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	lowp vec4 _Channels;
					uniform 	mediump vec4 _Levels;
					in highp vec4 in_POSITION0;
					in highp vec3 in_TEXCOORD0;
					out highp vec3 vs_TEXCOORD0;
					highp vec4 t0;
					void main()
					{
					    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
					    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
					    vs_TEXCOORD0.xyz = in_TEXCOORD0.xyz;
					    return;
					}
					#endif
					#ifdef FRAGMENT
					#version 300 es
					precision highp float;
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _SinTime;
					uniform 	vec4 _CosTime;
					uniform 	vec4 unity_DeltaTime;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_OrthoParams;
					uniform 	vec4 unity_CameraWorldClipPlanes[6];
					uniform 	mat4 unity_CameraProjection;
					uniform 	mat4 unity_CameraInvProjection;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 unity_LightPosition[8];
					uniform 	mediump vec4 unity_LightAtten[8];
					uniform 	vec4 unity_SpotDirection[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec3 unity_LightColor0;
					uniform 	mediump vec3 unity_LightColor1;
					uniform 	mediump vec3 unity_LightColor2;
					uniform 	mediump vec3 unity_LightColor3;
					uniform 	vec4 unity_ShadowSplitSpheres[4];
					uniform 	vec4 unity_ShadowSplitSqRadii;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 _LightSplitsNear;
					uniform 	vec4 _LightSplitsFar;
					uniform 	mat4 unity_World2Shadow[4];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	mat4 glstate_matrix_mvp;
					uniform 	mat4 glstate_matrix_modelview0;
					uniform 	mat4 glstate_matrix_invtrans_modelview0;
					uniform 	mat4 _Object2World;
					uniform 	mat4 _World2Object;
					uniform 	vec4 unity_LODFade;
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	mat4 glstate_matrix_transpose_modelview0;
					uniform 	mat4 glstate_matrix_projection;
					uniform 	lowp vec4 glstate_lightmodel_ambient;
					uniform 	mat4 unity_MatrixV;
					uniform 	mat4 unity_MatrixVP;
					uniform 	lowp vec4 unity_AmbientSky;
					uniform 	lowp vec4 unity_AmbientEquator;
					uniform 	lowp vec4 unity_AmbientGround;
					uniform 	lowp vec4 unity_FogColor;
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 unity_SpecCube0_BoxMax;
					uniform 	vec4 unity_SpecCube0_BoxMin;
					uniform 	vec4 unity_SpecCube0_ProbePosition;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	vec4 unity_SpecCube1_BoxMax;
					uniform 	vec4 unity_SpecCube1_BoxMin;
					uniform 	vec4 unity_SpecCube1_ProbePosition;
					uniform 	mediump vec4 unity_SpecCube1_HDR;
					uniform 	lowp vec4 unity_ColorSpaceGrey;
					uniform 	lowp vec4 unity_ColorSpaceDouble;
					uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
					uniform 	mediump vec4 unity_ColorSpaceLuminance;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	lowp vec4 _Channels;
					uniform 	mediump vec4 _Levels;
					uniform lowp sampler2D _MainTex;
					in highp vec3 vs_TEXCOORD0;
					layout(location = 0) out lowp vec4 SV_Target0;
					mediump vec4 t16_0;
					lowp vec4 t10_0;
					mediump float t16_1;
					lowp float t10_2;
					bool tb3;
					void main()
					{
					    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    t16_0 = t10_0 + (-_Levels.xxxx);
					    t16_1 = (-_Levels.x) + _Levels.y;
					    t16_0 = t16_0 / vec4(t16_1);
					    t16_0 = t16_0 * _Channels;
					    t16_1 = dot(t16_0, vec4(1.0, 1.0, 1.0, 1.0));
					    t10_2 = dot(_Channels, vec4(1.0, 1.0, 1.0, 1.0));
					    tb3 = t10_2==1.0;
					    t16_0 = (bool(tb3)) ? vec4(t16_1) : t16_0;
					    SV_Target0 = t16_0;
					    return;
					}
					#endif"
}
SubProgram "glcore " {
"!!GLCore32
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_shader_bit_encoding : enable
					uniform 	vec4 _Time;
					uniform 	vec4 _SinTime;
					uniform 	vec4 _CosTime;
					uniform 	vec4 unity_DeltaTime;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_OrthoParams;
					uniform 	vec4 unity_CameraWorldClipPlanes[6];
					uniform 	mat4 unity_CameraProjection;
					uniform 	mat4 unity_CameraInvProjection;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	vec4 unity_4LightAtten0;
					uniform 	vec4 unity_LightColor[8];
					uniform 	vec4 unity_LightPosition[8];
					uniform 	vec4 unity_LightAtten[8];
					uniform 	vec4 unity_SpotDirection[8];
					uniform 	vec4 unity_SHAr;
					uniform 	vec4 unity_SHAg;
					uniform 	vec4 unity_SHAb;
					uniform 	vec4 unity_SHBr;
					uniform 	vec4 unity_SHBg;
					uniform 	vec4 unity_SHBb;
					uniform 	vec4 unity_SHC;
					uniform 	vec3 unity_LightColor0;
					uniform 	vec3 unity_LightColor1;
					uniform 	vec3 unity_LightColor2;
					uniform 	vec3 unity_LightColor3;
					uniform 	vec4 unity_ShadowSplitSpheres[4];
					uniform 	vec4 unity_ShadowSplitSqRadii;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 _LightSplitsNear;
					uniform 	vec4 _LightSplitsFar;
					uniform 	mat4 unity_World2Shadow[4];
					uniform 	vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	mat4 glstate_matrix_mvp;
					uniform 	mat4 glstate_matrix_modelview0;
					uniform 	mat4 glstate_matrix_invtrans_modelview0;
					uniform 	mat4 _Object2World;
					uniform 	mat4 _World2Object;
					uniform 	vec4 unity_LODFade;
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	mat4 glstate_matrix_transpose_modelview0;
					uniform 	mat4 glstate_matrix_projection;
					uniform 	vec4 glstate_lightmodel_ambient;
					uniform 	mat4 unity_MatrixV;
					uniform 	mat4 unity_MatrixVP;
					uniform 	vec4 unity_AmbientSky;
					uniform 	vec4 unity_AmbientEquator;
					uniform 	vec4 unity_AmbientGround;
					uniform 	vec4 unity_FogColor;
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 unity_SpecCube0_BoxMax;
					uniform 	vec4 unity_SpecCube0_BoxMin;
					uniform 	vec4 unity_SpecCube0_ProbePosition;
					uniform 	vec4 unity_SpecCube0_HDR;
					uniform 	vec4 unity_SpecCube1_BoxMax;
					uniform 	vec4 unity_SpecCube1_BoxMin;
					uniform 	vec4 unity_SpecCube1_ProbePosition;
					uniform 	vec4 unity_SpecCube1_HDR;
					uniform 	vec4 unity_ColorSpaceGrey;
					uniform 	vec4 unity_ColorSpaceDouble;
					uniform 	vec4 unity_ColorSpaceDielectricSpec;
					uniform 	vec4 unity_ColorSpaceLuminance;
					uniform 	vec4 unity_Lightmap_HDR;
					uniform 	vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Channels;
					uniform 	vec4 _Levels;
					in  vec4 in_POSITION0;
					in  vec3 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					vec4 t0;
					void main()
					{
					    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
					    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
					    vs_TEXCOORD0.xyz = in_TEXCOORD0.xyz;
					    return;
					}
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_shader_bit_encoding : enable
					uniform 	vec4 _Time;
					uniform 	vec4 _SinTime;
					uniform 	vec4 _CosTime;
					uniform 	vec4 unity_DeltaTime;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_OrthoParams;
					uniform 	vec4 unity_CameraWorldClipPlanes[6];
					uniform 	mat4 unity_CameraProjection;
					uniform 	mat4 unity_CameraInvProjection;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	vec4 unity_4LightAtten0;
					uniform 	vec4 unity_LightColor[8];
					uniform 	vec4 unity_LightPosition[8];
					uniform 	vec4 unity_LightAtten[8];
					uniform 	vec4 unity_SpotDirection[8];
					uniform 	vec4 unity_SHAr;
					uniform 	vec4 unity_SHAg;
					uniform 	vec4 unity_SHAb;
					uniform 	vec4 unity_SHBr;
					uniform 	vec4 unity_SHBg;
					uniform 	vec4 unity_SHBb;
					uniform 	vec4 unity_SHC;
					uniform 	vec3 unity_LightColor0;
					uniform 	vec3 unity_LightColor1;
					uniform 	vec3 unity_LightColor2;
					uniform 	vec3 unity_LightColor3;
					uniform 	vec4 unity_ShadowSplitSpheres[4];
					uniform 	vec4 unity_ShadowSplitSqRadii;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 _LightSplitsNear;
					uniform 	vec4 _LightSplitsFar;
					uniform 	mat4 unity_World2Shadow[4];
					uniform 	vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	mat4 glstate_matrix_mvp;
					uniform 	mat4 glstate_matrix_modelview0;
					uniform 	mat4 glstate_matrix_invtrans_modelview0;
					uniform 	mat4 _Object2World;
					uniform 	mat4 _World2Object;
					uniform 	vec4 unity_LODFade;
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	mat4 glstate_matrix_transpose_modelview0;
					uniform 	mat4 glstate_matrix_projection;
					uniform 	vec4 glstate_lightmodel_ambient;
					uniform 	mat4 unity_MatrixV;
					uniform 	mat4 unity_MatrixVP;
					uniform 	vec4 unity_AmbientSky;
					uniform 	vec4 unity_AmbientEquator;
					uniform 	vec4 unity_AmbientGround;
					uniform 	vec4 unity_FogColor;
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 unity_SpecCube0_BoxMax;
					uniform 	vec4 unity_SpecCube0_BoxMin;
					uniform 	vec4 unity_SpecCube0_ProbePosition;
					uniform 	vec4 unity_SpecCube0_HDR;
					uniform 	vec4 unity_SpecCube1_BoxMax;
					uniform 	vec4 unity_SpecCube1_BoxMin;
					uniform 	vec4 unity_SpecCube1_ProbePosition;
					uniform 	vec4 unity_SpecCube1_HDR;
					uniform 	vec4 unity_ColorSpaceGrey;
					uniform 	vec4 unity_ColorSpaceDouble;
					uniform 	vec4 unity_ColorSpaceDielectricSpec;
					uniform 	vec4 unity_ColorSpaceLuminance;
					uniform 	vec4 unity_Lightmap_HDR;
					uniform 	vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Channels;
					uniform 	vec4 _Levels;
					uniform  sampler2D _MainTex;
					in  vec3 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 t0;
					lowp vec4 t10_0;
					float t1;
					float t3;
					bool tb3;
					void main()
					{
					    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    t0 = t10_0 + (-_Levels.xxxx);
					    t1 = (-_Levels.x) + _Levels.y;
					    t0 = t0 / vec4(t1);
					    t0 = t0 * _Channels;
					    t1 = dot(t0, vec4(1.0, 1.0, 1.0, 1.0));
					    t3 = dot(_Channels, vec4(1.0, 1.0, 1.0, 1.0));
					    tb3 = t3==1.0;
					    SV_Target0 = (bool(tb3)) ? vec4(t1) : t0;
					    return;
					}
					#endif"
}
}
Program "fp" {
SubProgram "opengl " {
"!!GLLegacy"
}
SubProgram "d3d9 " {
"!!DX9PixelSM20
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Channels;
					//   float4 _Levels;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Channels    c0       1
					//   _Levels      c1       1
					//   _MainTex     s0       1
					//
					
					    ps_2_0
					    def c2, 1, -1, 0, 0
					    dcl t0.xy
					    dcl_2d s0
					    texld_pp r0, t0, s0
					    mov r1.w, c2.x
					    dp4_pp r1.x, c0, r1.w
					    add r1.x, r1.x, c2.y
					    mul r1.x, r1.x, r1.x
					    add_pp r0, r0, -c1.x
					    add_pp r1.y, -c1.x, c1.y
					    rcp r1.y, r1.y
					    mul_pp r0, r0, r1.y
					    mul_pp r0, r0, c0
					    dp4_pp r1.y, r0, c2.x
					    cmp_pp r0, -r1.x, r1.y, r0
					    mov_pp oC0, r0
					
					// approximately 13 instruction slots used (1 texture, 12 arithmetic)"
}
SubProgram "d3d11 " {
"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_temps 2
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					add r0.xyzw, r0.xyzw, -cb0[7].xxxx
					add r1.x, -cb0[7].x, cb0[7].y
					div r0.xyzw, r0.xyzw, r1.xxxx
					mul r0.xyzw, r0.xyzw, cb0[6].xyzw
					dp4 r1.x, r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					dp4 r1.y, cb0[6].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					eq r1.y, r1.y, l(1.000000)
					movc o0.xyzw, r1.yyyy, r1.xxxx, r0.xyzw
					ret 
					// Approximately 0 instruction slots used"
}
SubProgram "gles " {
"!!GLES"
}
SubProgram "d3d11_9x " {
"!!DX10Level9Pixel
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					//
					// Constant buffer to DX9 shader constant mappings:
					//
					// Target Reg Buffer  Start Reg # of Regs        Data Conversion
					// ---------- ------- --------- --------- ----------------------
					// c0         cb0             6         2  ( FLT, FLT, FLT, FLT)
					//
					//
					// Sampler/Resource to DX9 shader sampler mappings:
					//
					// Target Sampler Source Sampler  Source Resource
					// -------------- --------------- ----------------
					// s0             s0              t0               
					//
					//
					// Level9 shader bytecode:
					//
					    ps_2_0
					    def c2, 1, -1, 0, 0
					    dcl t0.xyz
					    dcl_2d s0
					    texld_pp r0, t0, s0
					    mov r1.w, c2.x
					    dp4_pp r1.x, c0, r1.w
					    add r1.x, r1.x, c2.y
					    mul r1.x, r1.x, r1.x
					    add_pp r0, r0, -c1.x
					    add_pp r1.y, -c1.x, c1.y
					    rcp r1.y, r1.y
					    mul_pp r0, r0, r1.y
					    mul_pp r0, r0, c0
					    dp4_pp r1.y, r0, c2.x
					    cmp_pp r0, -r1.x, r1.y, r0
					    mov_pp oC0, r0
					
					// approximately 13 instruction slots used (1 texture, 12 arithmetic)
					ps_4_0
					dcl_constantbuffer CB0[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_temps 2
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					add r0.xyzw, r0.xyzw, -cb0[7].xxxx
					add r1.x, -cb0[7].x, cb0[7].y
					div r0.xyzw, r0.xyzw, r1.xxxx
					mul r0.xyzw, r0.xyzw, cb0[6].xyzw
					dp4 r1.x, r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					dp4 r1.y, cb0[6].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					eq r1.y, r1.y, l(1.000000)
					movc o0.xyzw, r1.yyyy, r1.xxxx, r0.xyzw
					ret 
					// Approximately 0 instruction slots used"
}
SubProgram "gles3 " {
"!!GLES3"
}
SubProgram "glcore " {
"!!GLCore32"
}
}
 }
 Pass {
  Tags { "ForceSupported"="true" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 76201
Program "vp" {
SubProgram "opengl " {
"!!GLLegacy
					#version 120
					
					#ifdef VERTEX
					
					varying vec3 xlv_TEXCOORD0;
					void main ()
					{
					  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
					  xlv_TEXCOORD0 = gl_MultiTexCoord0.xyz;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform vec4 _Channels;
					uniform vec4 _Levels;
					uniform samplerCube _MainTex;
					varying vec3 xlv_TEXCOORD0;
					void main ()
					{
					  vec4 col_1;
					  col_1 = (textureCube (_MainTex, xlv_TEXCOORD0) - _Levels.xxxx);
					  col_1 = (col_1 / (_Levels.yyyy - _Levels.xxxx));
					  col_1 = (col_1 * _Channels);
					  float tmpvar_2;
					  tmpvar_2 = dot (_Channels, vec4(1.0, 1.0, 1.0, 1.0));
					  if ((tmpvar_2 == 1.0)) {
					    col_1 = vec4(dot (col_1, vec4(1.0, 1.0, 1.0, 1.0)));
					  };
					  gl_FragData[0] = col_1;
					}
					
					
					#endif"
}
SubProgram "d3d9 " {
"!!DX9VertexSM20
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_2_0
					    dcl_position v0
					    dcl_texcoord v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mov oT0.xyz, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[4], immediateIndexed
					dcl_input v0.xyzw
					dcl_input v1.xyz
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_temps 1
					mul r0.xyzw, v0.yyyy, cb0[1].xyzw
					mad r0.xyzw, cb0[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb0[2].xyzw, v0.zzzz, r0.xyzw
					mad o0.xyzw, cb0[3].xyzw, v0.wwww, r0.xyzw
					mov o1.xyz, v1.xyzx
					ret 
					// Approximately 0 instruction slots used"
}
SubProgram "gles " {
"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 glstate_matrix_mvp;
					varying highp vec3 xlv_TEXCOORD0;
					void main ()
					{
					  gl_Position = (glstate_matrix_mvp * _glesVertex);
					  xlv_TEXCOORD0 = _glesMultiTexCoord0.xyz;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform lowp vec4 _Channels;
					uniform mediump vec4 _Levels;
					uniform lowp samplerCube _MainTex;
					varying highp vec3 xlv_TEXCOORD0;
					void main ()
					{
					  mediump vec4 tex_1;
					  lowp vec4 tmpvar_2;
					  tmpvar_2 = textureCube (_MainTex, xlv_TEXCOORD0);
					  tex_1 = tmpvar_2;
					  lowp vec4 tmpvar_3;
					  mediump vec4 col_4;
					  col_4 = (tex_1 - _Levels.xxxx);
					  col_4 = (col_4 / (_Levels.yyyy - _Levels.xxxx));
					  col_4 = (col_4 * _Channels);
					  lowp float tmpvar_5;
					  tmpvar_5 = dot (_Channels, vec4(1.0, 1.0, 1.0, 1.0));
					  if ((tmpvar_5 == 1.0)) {
					    col_4 = vec4(dot (col_4, vec4(1.0, 1.0, 1.0, 1.0)));
					  };
					  tmpvar_3 = col_4;
					  gl_FragData[0] = tmpvar_3;
					}
					
					
					#endif"
}
SubProgram "d3d11_9x " {
"!!DX10Level9Vertex
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					//
					//
					// Constant buffer to DX9 shader constant mappings:
					//
					// Target Reg Buffer  Start Reg # of Regs        Data Conversion
					// ---------- ------- --------- --------- ----------------------
					// c1         cb0             0         4  ( FLT, FLT, FLT, FLT)
					//
					//
					// Runtime generated constant mappings:
					//
					// Target Reg                               Constant Description
					// ---------- --------------------------------------------------
					// c0                              Vertex Shader position offset
					//
					//
					// Level9 shader bytecode:
					//
					    vs_2_0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    mul r0, v0.y, c2
					    mad r0, c1, v0.x, r0
					    mad r0, c3, v0.z, r0
					    mad r0, c4, v0.w, r0
					    mad oPos.xy, r0.w, c0, r0
					    mov oPos.zw, r0
					    mov oT0.xyz, v1
					
					// approximately 7 instruction slots used
					vs_4_0
					dcl_constantbuffer CB0[4], immediateIndexed
					dcl_input v0.xyzw
					dcl_input v1.xyz
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_temps 1
					mul r0.xyzw, v0.yyyy, cb0[1].xyzw
					mad r0.xyzw, cb0[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb0[2].xyzw, v0.zzzz, r0.xyzw
					mad o0.xyzw, cb0[3].xyzw, v0.wwww, r0.xyzw
					mov o1.xyz, v1.xyzx
					ret 
					// Approximately 0 instruction slots used"
}
SubProgram "gles3 " {
"!!GLES3
					#ifdef VERTEX
					#version 300 es
					precision highp float;
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _SinTime;
					uniform 	vec4 _CosTime;
					uniform 	vec4 unity_DeltaTime;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_OrthoParams;
					uniform 	vec4 unity_CameraWorldClipPlanes[6];
					uniform 	mat4 unity_CameraProjection;
					uniform 	mat4 unity_CameraInvProjection;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 unity_LightPosition[8];
					uniform 	mediump vec4 unity_LightAtten[8];
					uniform 	vec4 unity_SpotDirection[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec3 unity_LightColor0;
					uniform 	mediump vec3 unity_LightColor1;
					uniform 	mediump vec3 unity_LightColor2;
					uniform 	mediump vec3 unity_LightColor3;
					uniform 	vec4 unity_ShadowSplitSpheres[4];
					uniform 	vec4 unity_ShadowSplitSqRadii;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 _LightSplitsNear;
					uniform 	vec4 _LightSplitsFar;
					uniform 	mat4 unity_World2Shadow[4];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	mat4 glstate_matrix_mvp;
					uniform 	mat4 glstate_matrix_modelview0;
					uniform 	mat4 glstate_matrix_invtrans_modelview0;
					uniform 	mat4 _Object2World;
					uniform 	mat4 _World2Object;
					uniform 	vec4 unity_LODFade;
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	mat4 glstate_matrix_transpose_modelview0;
					uniform 	mat4 glstate_matrix_projection;
					uniform 	lowp vec4 glstate_lightmodel_ambient;
					uniform 	mat4 unity_MatrixV;
					uniform 	mat4 unity_MatrixVP;
					uniform 	lowp vec4 unity_AmbientSky;
					uniform 	lowp vec4 unity_AmbientEquator;
					uniform 	lowp vec4 unity_AmbientGround;
					uniform 	lowp vec4 unity_FogColor;
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 unity_SpecCube0_BoxMax;
					uniform 	vec4 unity_SpecCube0_BoxMin;
					uniform 	vec4 unity_SpecCube0_ProbePosition;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	vec4 unity_SpecCube1_BoxMax;
					uniform 	vec4 unity_SpecCube1_BoxMin;
					uniform 	vec4 unity_SpecCube1_ProbePosition;
					uniform 	mediump vec4 unity_SpecCube1_HDR;
					uniform 	lowp vec4 unity_ColorSpaceGrey;
					uniform 	lowp vec4 unity_ColorSpaceDouble;
					uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
					uniform 	mediump vec4 unity_ColorSpaceLuminance;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	lowp vec4 _Channels;
					uniform 	mediump vec4 _Levels;
					in highp vec4 in_POSITION0;
					in highp vec3 in_TEXCOORD0;
					out highp vec3 vs_TEXCOORD0;
					highp vec4 t0;
					void main()
					{
					    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
					    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
					    vs_TEXCOORD0.xyz = in_TEXCOORD0.xyz;
					    return;
					}
					#endif
					#ifdef FRAGMENT
					#version 300 es
					precision highp float;
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _SinTime;
					uniform 	vec4 _CosTime;
					uniform 	vec4 unity_DeltaTime;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_OrthoParams;
					uniform 	vec4 unity_CameraWorldClipPlanes[6];
					uniform 	mat4 unity_CameraProjection;
					uniform 	mat4 unity_CameraInvProjection;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 unity_LightPosition[8];
					uniform 	mediump vec4 unity_LightAtten[8];
					uniform 	vec4 unity_SpotDirection[8];
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec3 unity_LightColor0;
					uniform 	mediump vec3 unity_LightColor1;
					uniform 	mediump vec3 unity_LightColor2;
					uniform 	mediump vec3 unity_LightColor3;
					uniform 	vec4 unity_ShadowSplitSpheres[4];
					uniform 	vec4 unity_ShadowSplitSqRadii;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 _LightSplitsNear;
					uniform 	vec4 _LightSplitsFar;
					uniform 	mat4 unity_World2Shadow[4];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	mat4 glstate_matrix_mvp;
					uniform 	mat4 glstate_matrix_modelview0;
					uniform 	mat4 glstate_matrix_invtrans_modelview0;
					uniform 	mat4 _Object2World;
					uniform 	mat4 _World2Object;
					uniform 	vec4 unity_LODFade;
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	mat4 glstate_matrix_transpose_modelview0;
					uniform 	mat4 glstate_matrix_projection;
					uniform 	lowp vec4 glstate_lightmodel_ambient;
					uniform 	mat4 unity_MatrixV;
					uniform 	mat4 unity_MatrixVP;
					uniform 	lowp vec4 unity_AmbientSky;
					uniform 	lowp vec4 unity_AmbientEquator;
					uniform 	lowp vec4 unity_AmbientGround;
					uniform 	lowp vec4 unity_FogColor;
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 unity_SpecCube0_BoxMax;
					uniform 	vec4 unity_SpecCube0_BoxMin;
					uniform 	vec4 unity_SpecCube0_ProbePosition;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	vec4 unity_SpecCube1_BoxMax;
					uniform 	vec4 unity_SpecCube1_BoxMin;
					uniform 	vec4 unity_SpecCube1_ProbePosition;
					uniform 	mediump vec4 unity_SpecCube1_HDR;
					uniform 	lowp vec4 unity_ColorSpaceGrey;
					uniform 	lowp vec4 unity_ColorSpaceDouble;
					uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
					uniform 	mediump vec4 unity_ColorSpaceLuminance;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 unity_DynamicLightmap_HDR;
					uniform 	lowp vec4 _Channels;
					uniform 	mediump vec4 _Levels;
					uniform lowp samplerCube _MainTex;
					in highp vec3 vs_TEXCOORD0;
					layout(location = 0) out lowp vec4 SV_Target0;
					mediump vec4 t16_0;
					lowp vec4 t10_0;
					mediump float t16_1;
					lowp float t10_2;
					bool tb3;
					void main()
					{
					    t10_0 = texture(_MainTex, vs_TEXCOORD0.xyz);
					    t16_0 = t10_0 + (-_Levels.xxxx);
					    t16_1 = (-_Levels.x) + _Levels.y;
					    t16_0 = t16_0 / vec4(t16_1);
					    t16_0 = t16_0 * _Channels;
					    t16_1 = dot(t16_0, vec4(1.0, 1.0, 1.0, 1.0));
					    t10_2 = dot(_Channels, vec4(1.0, 1.0, 1.0, 1.0));
					    tb3 = t10_2==1.0;
					    t16_0 = (bool(tb3)) ? vec4(t16_1) : t16_0;
					    SV_Target0 = t16_0;
					    return;
					}
					#endif"
}
SubProgram "glcore " {
"!!GLCore32
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_shader_bit_encoding : enable
					uniform 	vec4 _Time;
					uniform 	vec4 _SinTime;
					uniform 	vec4 _CosTime;
					uniform 	vec4 unity_DeltaTime;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_OrthoParams;
					uniform 	vec4 unity_CameraWorldClipPlanes[6];
					uniform 	mat4 unity_CameraProjection;
					uniform 	mat4 unity_CameraInvProjection;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	vec4 unity_4LightAtten0;
					uniform 	vec4 unity_LightColor[8];
					uniform 	vec4 unity_LightPosition[8];
					uniform 	vec4 unity_LightAtten[8];
					uniform 	vec4 unity_SpotDirection[8];
					uniform 	vec4 unity_SHAr;
					uniform 	vec4 unity_SHAg;
					uniform 	vec4 unity_SHAb;
					uniform 	vec4 unity_SHBr;
					uniform 	vec4 unity_SHBg;
					uniform 	vec4 unity_SHBb;
					uniform 	vec4 unity_SHC;
					uniform 	vec3 unity_LightColor0;
					uniform 	vec3 unity_LightColor1;
					uniform 	vec3 unity_LightColor2;
					uniform 	vec3 unity_LightColor3;
					uniform 	vec4 unity_ShadowSplitSpheres[4];
					uniform 	vec4 unity_ShadowSplitSqRadii;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 _LightSplitsNear;
					uniform 	vec4 _LightSplitsFar;
					uniform 	mat4 unity_World2Shadow[4];
					uniform 	vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	mat4 glstate_matrix_mvp;
					uniform 	mat4 glstate_matrix_modelview0;
					uniform 	mat4 glstate_matrix_invtrans_modelview0;
					uniform 	mat4 _Object2World;
					uniform 	mat4 _World2Object;
					uniform 	vec4 unity_LODFade;
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	mat4 glstate_matrix_transpose_modelview0;
					uniform 	mat4 glstate_matrix_projection;
					uniform 	vec4 glstate_lightmodel_ambient;
					uniform 	mat4 unity_MatrixV;
					uniform 	mat4 unity_MatrixVP;
					uniform 	vec4 unity_AmbientSky;
					uniform 	vec4 unity_AmbientEquator;
					uniform 	vec4 unity_AmbientGround;
					uniform 	vec4 unity_FogColor;
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 unity_SpecCube0_BoxMax;
					uniform 	vec4 unity_SpecCube0_BoxMin;
					uniform 	vec4 unity_SpecCube0_ProbePosition;
					uniform 	vec4 unity_SpecCube0_HDR;
					uniform 	vec4 unity_SpecCube1_BoxMax;
					uniform 	vec4 unity_SpecCube1_BoxMin;
					uniform 	vec4 unity_SpecCube1_ProbePosition;
					uniform 	vec4 unity_SpecCube1_HDR;
					uniform 	vec4 unity_ColorSpaceGrey;
					uniform 	vec4 unity_ColorSpaceDouble;
					uniform 	vec4 unity_ColorSpaceDielectricSpec;
					uniform 	vec4 unity_ColorSpaceLuminance;
					uniform 	vec4 unity_Lightmap_HDR;
					uniform 	vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Channels;
					uniform 	vec4 _Levels;
					in  vec4 in_POSITION0;
					in  vec3 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					vec4 t0;
					void main()
					{
					    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
					    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
					    vs_TEXCOORD0.xyz = in_TEXCOORD0.xyz;
					    return;
					}
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_shader_bit_encoding : enable
					uniform 	vec4 _Time;
					uniform 	vec4 _SinTime;
					uniform 	vec4 _CosTime;
					uniform 	vec4 unity_DeltaTime;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_OrthoParams;
					uniform 	vec4 unity_CameraWorldClipPlanes[6];
					uniform 	mat4 unity_CameraProjection;
					uniform 	mat4 unity_CameraInvProjection;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	vec4 unity_4LightAtten0;
					uniform 	vec4 unity_LightColor[8];
					uniform 	vec4 unity_LightPosition[8];
					uniform 	vec4 unity_LightAtten[8];
					uniform 	vec4 unity_SpotDirection[8];
					uniform 	vec4 unity_SHAr;
					uniform 	vec4 unity_SHAg;
					uniform 	vec4 unity_SHAb;
					uniform 	vec4 unity_SHBr;
					uniform 	vec4 unity_SHBg;
					uniform 	vec4 unity_SHBb;
					uniform 	vec4 unity_SHC;
					uniform 	vec3 unity_LightColor0;
					uniform 	vec3 unity_LightColor1;
					uniform 	vec3 unity_LightColor2;
					uniform 	vec3 unity_LightColor3;
					uniform 	vec4 unity_ShadowSplitSpheres[4];
					uniform 	vec4 unity_ShadowSplitSqRadii;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 _LightSplitsNear;
					uniform 	vec4 _LightSplitsFar;
					uniform 	mat4 unity_World2Shadow[4];
					uniform 	vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	mat4 glstate_matrix_mvp;
					uniform 	mat4 glstate_matrix_modelview0;
					uniform 	mat4 glstate_matrix_invtrans_modelview0;
					uniform 	mat4 _Object2World;
					uniform 	mat4 _World2Object;
					uniform 	vec4 unity_LODFade;
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	mat4 glstate_matrix_transpose_modelview0;
					uniform 	mat4 glstate_matrix_projection;
					uniform 	vec4 glstate_lightmodel_ambient;
					uniform 	mat4 unity_MatrixV;
					uniform 	mat4 unity_MatrixVP;
					uniform 	vec4 unity_AmbientSky;
					uniform 	vec4 unity_AmbientEquator;
					uniform 	vec4 unity_AmbientGround;
					uniform 	vec4 unity_FogColor;
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	vec4 unity_SpecCube0_BoxMax;
					uniform 	vec4 unity_SpecCube0_BoxMin;
					uniform 	vec4 unity_SpecCube0_ProbePosition;
					uniform 	vec4 unity_SpecCube0_HDR;
					uniform 	vec4 unity_SpecCube1_BoxMax;
					uniform 	vec4 unity_SpecCube1_BoxMin;
					uniform 	vec4 unity_SpecCube1_ProbePosition;
					uniform 	vec4 unity_SpecCube1_HDR;
					uniform 	vec4 unity_ColorSpaceGrey;
					uniform 	vec4 unity_ColorSpaceDouble;
					uniform 	vec4 unity_ColorSpaceDielectricSpec;
					uniform 	vec4 unity_ColorSpaceLuminance;
					uniform 	vec4 unity_Lightmap_HDR;
					uniform 	vec4 unity_DynamicLightmap_HDR;
					uniform 	vec4 _Channels;
					uniform 	vec4 _Levels;
					uniform  samplerCube _MainTex;
					in  vec3 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 t0;
					lowp vec4 t10_0;
					float t1;
					float t3;
					bool tb3;
					void main()
					{
					    t10_0 = texture(_MainTex, vs_TEXCOORD0.xyz);
					    t0 = t10_0 + (-_Levels.xxxx);
					    t1 = (-_Levels.x) + _Levels.y;
					    t0 = t0 / vec4(t1);
					    t0 = t0 * _Channels;
					    t1 = dot(t0, vec4(1.0, 1.0, 1.0, 1.0));
					    t3 = dot(_Channels, vec4(1.0, 1.0, 1.0, 1.0));
					    tb3 = t3==1.0;
					    SV_Target0 = (bool(tb3)) ? vec4(t1) : t0;
					    return;
					}
					#endif"
}
}
Program "fp" {
SubProgram "opengl " {
"!!GLLegacy"
}
SubProgram "d3d9 " {
"!!DX9PixelSM20
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Channels;
					//   float4 _Levels;
					//   samplerCUBE _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Channels    c0       1
					//   _Levels      c1       1
					//   _MainTex     s0       1
					//
					
					    ps_2_0
					    def c2, 1, -1, 0, 0
					    dcl t0.xyz
					    dcl_cube s0
					    texld_pp r0, t0, s0
					    mov r1.w, c2.x
					    dp4_pp r1.x, c0, r1.w
					    add r1.x, r1.x, c2.y
					    mul r1.x, r1.x, r1.x
					    add_pp r0, r0, -c1.x
					    add_pp r1.y, -c1.x, c1.y
					    rcp r1.y, r1.y
					    mul_pp r0, r0, r1.y
					    mul_pp r0, r0, c0
					    dp4_pp r1.y, r0, c2.x
					    cmp_pp r0, -r1.x, r1.y, r0
					    mov_pp oC0, r0
					
					// approximately 13 instruction slots used (1 texture, 12 arithmetic)"
}
SubProgram "d3d11 " {
"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texturecube (float,float,float,float) t0
					dcl_input_ps linear v1.xyz
					dcl_output o0.xyzw
					dcl_temps 2
					sample r0.xyzw, v1.xyzx, t0.xyzw, s0
					add r0.xyzw, r0.xyzw, -cb0[7].xxxx
					add r1.x, -cb0[7].x, cb0[7].y
					div r0.xyzw, r0.xyzw, r1.xxxx
					mul r0.xyzw, r0.xyzw, cb0[6].xyzw
					dp4 r1.x, r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					dp4 r1.y, cb0[6].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					eq r1.y, r1.y, l(1.000000)
					movc o0.xyzw, r1.yyyy, r1.xxxx, r0.xyzw
					ret 
					// Approximately 0 instruction slots used"
}
SubProgram "gles " {
"!!GLES"
}
SubProgram "d3d11_9x " {
"!!DX10Level9Pixel
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					//
					// Constant buffer to DX9 shader constant mappings:
					//
					// Target Reg Buffer  Start Reg # of Regs        Data Conversion
					// ---------- ------- --------- --------- ----------------------
					// c0         cb0             6         2  ( FLT, FLT, FLT, FLT)
					//
					//
					// Sampler/Resource to DX9 shader sampler mappings:
					//
					// Target Sampler Source Sampler  Source Resource
					// -------------- --------------- ----------------
					// s0             s0              t0               
					//
					//
					// Level9 shader bytecode:
					//
					    ps_2_0
					    def c2, 1, -1, 0, 0
					    dcl t0.xyz
					    dcl_cube s0
					    texld_pp r0, t0, s0
					    mov r1.w, c2.x
					    dp4_pp r1.x, c0, r1.w
					    add r1.x, r1.x, c2.y
					    mul r1.x, r1.x, r1.x
					    add_pp r0, r0, -c1.x
					    add_pp r1.y, -c1.x, c1.y
					    rcp r1.y, r1.y
					    mul_pp r0, r0, r1.y
					    mul_pp r0, r0, c0
					    dp4_pp r1.y, r0, c2.x
					    cmp_pp r0, -r1.x, r1.y, r0
					    mov_pp oC0, r0
					
					// approximately 13 instruction slots used (1 texture, 12 arithmetic)
					ps_4_0
					dcl_constantbuffer CB0[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texturecube (float,float,float,float) t0
					dcl_input_ps linear v1.xyz
					dcl_output o0.xyzw
					dcl_temps 2
					sample r0.xyzw, v1.xyzx, t0.xyzw, s0
					add r0.xyzw, r0.xyzw, -cb0[7].xxxx
					add r1.x, -cb0[7].x, cb0[7].y
					div r0.xyzw, r0.xyzw, r1.xxxx
					mul r0.xyzw, r0.xyzw, cb0[6].xyzw
					dp4 r1.x, r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					dp4 r1.y, cb0[6].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					eq r1.y, r1.y, l(1.000000)
					movc o0.xyzw, r1.yyyy, r1.xxxx, r0.xyzw
					ret 
					// Approximately 0 instruction slots used"
}
SubProgram "gles3 " {
"!!GLES3"
}
SubProgram "glcore " {
"!!GLCore32"
}
}
 }
}
Fallback Off
}